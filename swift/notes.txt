UIKit is Apple's native user interface toolkit. It contains things like buttons, text boxes, navigation controls and more, and you drive it using Swift.

AppKit is Apple’s native user interface toolkit for macOS. Like UIKit it contains things like buttons, text boxes, and more, although focused on macOS rather than iOS.

SwiftUI is a cross-platform toolkit that lets us build apps for iOS, macOS, tvOS, and watchOS.
Cocoa Touch is the name commonly used for Apple's vast collection of frameworks for iOS. It includes 
UIKit to do user interfaces, but most people would say it also includes SpriteKit for making 2D games, SceneKit for making 3D games, MapKit for maps, Core Graphics for drawing, Core Animation for animating things, and much more.

Cocoa is the name used for Apple’s framework collection on macOS. Strictly speaking it’s made up of 

AppKit for user interface, Foundation for basic functionality, and Core Data for object graphs, but like Cocoa Touch it’s often used to mean “all of macOS development.”

Playgrounds are miniature Swift testing environments that let you type code and see the results immediately. You don't build real apps with them, but they are great for learning.


`var` for variable declarations

`let` for constant declarations



you can declare and define a variable at once

`var name = "Maya"`

`var age = 5`

or use a type annotation

`var name: String`

`var age: Int`

`var age: Int = 3`



basic types are String, Int, Float, Double, Bool

Double has higher accuracy than Float



string interpolation

var name = "Maya"

"Your name is \(name)"



arrays use type inference and can be declared un-typed

`var evenNumbers = [2, 4, 6, 8]

type(of: evenNumbers)`

=> Array<Int>.Type



they can also be declared with types

`var songs: [String] = ["Shake it Off", "You Belong with Me", "Back to December"]

var songs: [Any] = ["Shake it Off", "You Belong with Me", "Back to December", 3]

var songs: [String] = []

var songs = [String]()`



ranges inclusive ...

`for i in 1...10 {

    print("\(i) x 10 is \(i * 10)")

}`

ranges exclusive ..<



to range through an array

`for song in songs {

    print(song)

}



for i in 0..<people.count {

    print(song)

}`



switch case statements do not fall through

`var val = 2

switch val {

case 0:

case 1:

case 2:

    print("got a match")

default:

}



switch val {

case 0..>2:

case 2:

    print("got a match")

default:

}`



`func favoriteAlbum(name: String) {

    print("My favorite album is \(name)")

}



favoriteAlbum(name: "Fearless")`



you can use different internal and external parameter names for functions by declaring the variable twice

`func countLettersInString(external internal: String) {

    print("internal handle \(internal)")

}

countLettersInString(external: "Hello")



func countLettersInString(_ internal: String) {

    print("internal handle \(internal)")

}



countLettersInString("Hello")



func countLetters(in str: String) {

print("internal handle \(str)")

}

countLetters(in: "Hello")`



return values

`func albumIsTaylors(name: String) -> Bool {

    if name == "Fearless" { return true  }

    return false

}`



optionals might have a value or might not

`func getStatus(weather: String) -> String? {

    if weather == "sunny" { return nil }

    return "good"

}



var status: String?

status = getStatus(weather: "rainy")`



optional unwrapping checks if an optional has a value, and if so, it unwraps that into a non-optional type and then runs code block

`if let unwrappedStatus = status {

    // unwrappedStatus contains a non-optional string

} else {

     // it's an optional

}`



you can overwrite optional safety by using !, if you know an optional definitely has a value

`func yearAlbumReleased(name: String) -> Int? {

    if name == "Fearless" { return 2008 }

    return nil

}



var year = yearAlbumReleased(name: "Fearless")

if year == nil {

    print("There was an error")

} else {

    print("It was released in \(year)")

}`

=> It was released in Optional(2008)

to force unwrap the value (e.g. if you've already nil-checked), use

`print("It was released in \(year!)")`



implicitly unwrapped optionals

`var name: String = "Paul"

var name2: String? = "Bob"

var name3: String! = "Sophie"`

name2 must be unwrapped to be used, name3 does not have to be unwrapped



optional chaining

`let album = albumReleased(year: 2006)?.uppercased()`

chained optionals will be checked left to right until it finds a nil at which point it stops



nil coalescing operator `??`

`let album = albumReleased(year: 2006) ?? "unknown"`

if the return val is nil, it will return "unknown"



`enum WeatherType {

    case sun

    case cloud

    case rain

    case wind

    case snow

}



func getHaterStatus(weather: WeatherType) -> String? {

    if weather == .sun {

        return nil

    } else {

        return "Hate"

    }

}`

Swift uses type inference, knowing that weather var is a WeatherType object, so can identify it using just `.sun`



`func getHaterStatus(weather: WeatherType) -> String? {

    switch weather {

    case .sun:

        return nil

    case .cloud, .wind:

        return "dislike"

    }

}`

above will fail to compile because it does not cover all cases in the enum - either add cases for wind, snow, etc. or a default case to build



attach optional values to enum values and check in a case switch

`enum WeatherType {

case sun

case cloud

case rain

case wind(speed: Int)

case snow

}



func getHaterStatus(weather: WeatherType) -> String? {

    switch weather {

    case .sun:

        return nil

    case .wind(let speed) where speed < 10:

        return "meh"

    case .cloud, .wind:

        return "dislike"

    default:

        return nil

    }

}`



member-wise initializers are automatically created when you define a struct

`struct Person {

    var clothes: String

    var shoes: String

}



let taylor = Person(clothes: "T-shirts", shoes: "sneakers")`



copies of structs created like so

`let taylor = Person(clothes: "T-shirts", shoes: "sneakers")

var taylorCopy = taylor`

are copied by value not reference



classes do not get automatic member-wise initializers as structs do

classes can inherit from other classes

when you create an instance of a class it's called and object, and when you copy that object, they are copied by reference

`class Person {

    var clothes: String

    var shoes: String



    init(clothes: String, shoes: String) {

        self.clothes = clothes

        self.shoes = shoes

    }



    func sing() {

         print("la la")

    }

}`

all non-optional values must have a value by the end of its initializer



`class Singer: Person {

    override func sing() {

        print("different la la")

    }    

}`



`class HeavyMetalSinger: Singer {

    var noiseLevel: Int



    init(name: String, age: String, noseLevel: Int) {

        self.noiseLevel = noiseLevel

        super.init(name: name, age: age)

    }

}`



if you need to make a function or class available for iOS to call, mark it with the attribute objc

`@objc func sing() {}`



two property observers, `willSet` which gives you a `newValue` handle and `didSet` which gives you an `oldValue` handle, which are called before or after a property is changed

`struct Person {

    var clothes: String {

        willSet {

            updateUI(msg: "I'm changing from \(clothes) to \(newValue)")

        }

    }

}`



computed properties can be accessed as properties but do a calculation at the time they're called, similar to functions

`struct Person {

    var age: Int

    

    var ageInDogYears: Int {

        get {

            return age * 7

        }

    }

}



var fan = Person(age: 25)

print(fan.ageInDogYears)`



static properties and methods belong to the type rather than an instance



access control

public - anyone can read and write property

internal - only your Swift code can read and write

fileprivate - only Swift code in same file

private - property is available only to methods defined on the type



typecasting

`for album in allAlbums {

    let studioAlbum = album as? StudioAlbum

}`

if typecast worked, you have a cast obj, otherwise nil



a closure is a variable that can hold lines of swift code



protocols - interface contract



Extensions let us modify Swift’s data types to add new functionality

protocol extensions let us define implementations of things inside the protocol, adding the functionality to all types that conform to the protocol in a single place.



Swift’s solution is to let us create protocol extensions: extensions that modify several data types at once.

You’ve already seen how the self keyword lets us refer to our current value, so self * self means “multiply my current number by itself.” Well, there’s also Self with a capital S, which has a subtly different meaning: it means “my current data type.” So, self means “my current value” and Self means “my current data type.”



If we want clamp() to apply to all types of integer, we can’t very well make it return Int - that’s not big enough to hold the full range of a UInt64, so Swift will refuse to build. Instead, we need to make the method return Self, which means “I’ll return whatever data type I was used with.”

Here’s the rewritten extension:

extension BinaryInteger {
    func clamp(low: Self, high: Self) -> Self {
        if (self > high) {
            return high
        } else if (self < low) {
            return low
        }

        return self
    }
}
Protocol extensions are helpful for providing default method implementations so that conforming types don’t need to implement those methods themselves unless they specifically want to.

As an example, we might define an extension for our Employee protocol so that all conforming types automatically get a doWork() method:

protocol Employee {
    var name: String { get set }
    var jobTitle: String { get set }
    func doWork()
}

extension Employee {
    func doWork() {
        print("I'm busy!")
    }
}

If you have large numbers, Swift lets you use underscores as thousands separators – they don’t change the number, but they do make it easier to read. For example:

var population = 8_000_000

If you want multi-line strings you need slightly different syntax: start and end with three double quote marks, like this:

var str1 = """
This goes
over multiple
lines
"""
the opening and closing triple must be on their own line, but opening and closing line breaks won’t be included in your final string.

If you only want multi-line strings to format your code neatly, and you don’t want those line breaks to actually be in your string, end each line with a \, like this:

var str2 = """
This goes \
over multiple \
lines
"""

Tuples allow you to store several values together in a single value. That might sound like arrays, but tuples are different:

You can’t add or remove items from a tuple; they are fixed in size.
You can’t change the type of items in a tuple; they always have the same types they were created with.
You can access items in a tuple using numerical positions or by naming them, but Swift won’t let you read numbers or names that don’t exist.

Tuples are created by placing multiple items into parentheses, like this:

var name = (first: "Taylor", last: "Swift")
You then access items using numerical positions starting from 0:

name.0
Or you can access items using their names:

name.first
Remember, you can change the values inside a tuple after you create it, but not the types of values. So, if you tried to change name to be (first: "Justin", age: 25) you would get an error.

But if we tried reading the favorite ice cream for Charlotte, we’d get back nil, meaning that Swift doesn’t have a value for that key:

giving the dictionary a default value of “Unknown”, so that when no ice cream is found for Charlotte we get back “Unknown” rather than nil:
favoriteIceCream["Charlotte", default: "Unknown"]

you can create an empty array to store integers like this:

var results = [Int]()
The exception is creating an empty set, which is done differently:

var words = Set<String>()
var numbers = Set<Int>()
This is because Swift has special syntax only for dictionaries and arrays; other types must use angle bracket syntax like sets.

If you wanted, you could create arrays and dictionaries with similar syntax:

var scores = Dictionary<String, Int>()
var results = Array<Int>()

we might define an enum that stores various kinds of activities:

enum Activity {
    case bored
    case running
    case talking
    case singing
}
That lets us say that someone is talking, but we don’t know what they are talking about, or we can know that someone is running, but we don’t know where they are running to.

Enum associated values let us add those additional details:

enum Activity {
    case bored
    case running(destination: String)
    case talking(topic: String)
    case singing(volume: Int)
}
Now we can be more precise – we can say that someone is talking about football:

let talking = Activity.talking(topic: "football")

Swift supports operator overloading, which is a fancy way of saying that what an operator does depends on the values you use it with. For example, + sums integers like this:

let meaningOfLife = 42
let doubleMeaning = 42 + 42
But + also joins strings, like this:

let fakers = "Fakers gonna "
let action = fakers + "fake"
You can even use + to join arrays, like this:

let firstHalf = ["John", "Paul"]
let secondHalf = ["George", "Ringo"]
let beatles = firstHalf + secondHalf
Remember, Swift is a type-safe language, which means it won’t let you mix types. For example, you can’t add an integer to a string because it doesn’t make any sense.

The third way of writing loops is not commonly used, but it’s so simple to learn we might as well cover it: it’s called the repeat loop, and it’s identical to a while loop except the condition to check comes at the end.

So, we could rewrite our hide and seek example like this:

var number = 1

repeat {
    print(number)
    number += 1
} while number <= 20

print("Ready or not, here I come!")
Because the condition comes at the end of the repeat loop the code inside the loop will always be executed at least once, whereas while loops check their condition before their first run.

outerLoop: for i in 1...10 {
    for j in 1...10 {
        let product = i * j
        print ("\(i) * \(j) is \(product)")
    }
}
Second, add our condition inside the inner loop, then use break outerLoop to exit both loops at the same time:

outerLoop: for i in 1...10 {
    for j in 1...10 {
        let product = i * j
        print ("\(i) * \(j) is \(product)")

        if product == 50 {
            print("It's a bullseye!")
            break outerLoop
        }
    }
}

You might have noticed that we don’t actually send any parameter names when we call print() – we say print("Hello") rather than print(message: "Hello").

You can get this same behavior in your own functions by using an underscore, _, for your external parameter name, like this:

func greet(_ person: String) {
    print("Hello, \(person)!")
}

You can make any parameter variadic by writing ... after its type. So, an Int parameter is a single integer, whereas Int... is zero or more integers – potentially hundreds.

Inside the function, Swift converts the values that were passed in to an array of integers, so you can loop over them as needed.

Sometimes functions fail because they have bad input, or because something went wrong internally. Swift lets us throw errors from functions by marking them as throws before their return type, then using the throw keyword when something goes wrong.

First we need to define an enum that describes the errors we can throw. These must always be based on Swift’s existing Error type. We’re going to write a function that checks whether a password is good, so we’ll throw an error if the user tries an obvious password:

enum PasswordError: Error {
    case obvious
}
Now we’ll write a checkPassword() function that will throw that error if something goes wrong. This means using the throws keyword before the function’s return value, then using throw PasswordError.obvious if their password is “password”.

Here’s that in Swift:

func checkPassword(_ password: String) throws -> Bool {
    if password == "password" {
        throw PasswordError.obvious
    }

    return true
}

Swift doesn’t like errors to happen when your program runs, which means it won’t let you run an error-throwing function by accident.

Instead, you need to call these functions using three new keywords: do starts a section of code that might cause problems, try is used before every function that might throw an error, and catch lets you handle errors gracefully.

If any errors are thrown inside the do block, execution immediately jumps to the catch block. Let’s try calling checkPassword() with a parameter that throws an error:

do {
    try checkPassword("password")
    print("That password is good!")
} catch {
    print("You can't use that password.")
}

All parameters passed into a Swift function are constants, so you can’t change them. If you want, you can pass in one or more parameters as inout, which means they can be changed inside your function, and those changes reflect in the original value outside the function.

For example, if you want to double a number in place – i.e., change the value directly rather than returning a new one – you might write a function like this:

func doubleInPlace(number: inout Int) {
    number *= 2
}
To use that, you first need to make a variable integer – you can’t use constant integers with inout, because they might be changed. You also need to pass the parameter to doubleInPlace using an ampersand, &, before its name, which is an explicit recognition that you’re aware it is being used as inout.

In code, you’d write this:

var myNum = 10 
doubleInPlace(number: &myNum)

Functions can return values, and again you just specify what type will be sent back. Use tuples if you want to return several things.

When you create closures, they don’t have a name or space to write any parameters. That doesn’t mean they can’t accept parameters, just that they do so in a different way: they are listed inside the open braces.

To make a closure accept parameters, list them inside parentheses just after the opening brace, then write in so that Swift knows the main body of the closure is starting.

For example, we could make a closure that accepts a place name string as its only parameter like this:

let driving = { (place: String) in
    print("I'm going to \(place) in my car")
}
One of the differences between functions and closures is that you don’t use parameter labels when running closures. So, to call driving() now we’d write this:

driving("London")

let drivingWithReturn = { (place: String) -> String in
    return "I'm going to \(place) in my car"
}
We can now run that closure and print its return value:

let message = drivingWithReturn("London")
print(message)

func travel(action: () -> Void) {
    print("I'm getting ready to go.")
    action()
    print("I arrived!")
}

If the last parameter to a function is a closure, Swift lets you use special syntax called trailing closure syntax. Rather than pass in your closure as a parameter, you pass it directly after the function inside braces.

To demonstrate this, here’s our travel() function again. It accepts an action closure so that it can be run between two print() calls:

func travel(action: () -> Void) {
    print("I'm getting ready to go.")
    action()
    print("I arrived!")
}
Because its last parameter is a closure, we can call travel() using trailing closure syntax like this:

travel() {
    print("I'm driving in my car")
}

travel { (place: String) in
    print("I'm going to \(place) in my car")
}

We just made a travel() function. It accepts one parameter, which is a closure that itself accepts one parameter and returns a string. That closure is then run between two calls to print().

Here’s that in code:

func travel(action: (String) -> String) {
    print("I'm getting ready to go.")
    let description = action("London")
    print(description)
    print("I arrived!")
}
We can call travel() using something like this:

travel { (place: String) -> String in
    return "I'm going to \(place) in my car"
}
However, Swift knows the parameter to that closure must be a string, so we can remove it:

travel { place -> String in
    return "I'm going to \(place) in my car"
}
It also knows the closure must return a string, so we can remove that:

travel { place in
    return "I'm going to \(place) in my car"
}
As the closure only has one line of code that must be the one that returns the value, so Swift lets us remove the return keyword too:

travel { place in
    "I'm going to \(place) in my car"
}
Swift has a shorthand syntax that lets you go even shorter. Rather than writing place in we can let Swift provide automatic names for the closure’s parameters. These are named with a dollar sign, then a number counting from 0.

travel {
    "I'm going to \($0) in my car"
}

Closure capturing happens if we create values in travel() that get used inside the closure. For example, we might want to track how often the returned closure is called:

func travel() -> (String) -> Void {
    var counter = 1

    return {
        print("\(counter). I'm going to \($0)")
        counter += 1
    }
}
Even though that counter variable was created inside travel(), it gets captured by the closure so it will still remain alive for that closure.

What we want to happen is for Swift to print a message every time amount changes, and we can use a didSet property observer for that. This will run some code every time amount changes:

struct Progress {
    var task: String
    var amount: Int {
        didSet {
            print("\(task) is now \(amount)% complete")
        }
    }
}
You can also use willSet to take action before a property changes, but that is rarely used.

If a struct has a variable property but the instance of the struct was created as a constant, that property can’t be changed – the struct is constant, so all its properties are also constant regardless of how they were created.

The problem is that when you create the struct Swift has no idea whether you will use it with constants or variables, so by default it takes the safe approach: Swift won’t let you write methods that change properties unless you specifically request it.

When you want to change a property inside a method, you need to mark it using the mutating keyword, like this:

struct Person {
    var name: String

    mutating func makeAnonymous() {
        name = "Anonymous"
    }
}

We can provide our own initializer to replace the default one. For example, we might want to create all new users as “Anonymous” and print a message, like this:

struct User {
    var username: String

    init() {
        username = "Anonymous"
        print("Creating a new user!")
    }
}
You don’t write func before initializers, but you do need to make sure all properties have a value before the initializer ends.

We might use that FamilyTree struct as a property inside a Person struct, like this:

struct Person {
    var name: String
    var familyTree = FamilyTree()

    init(name: String) {
        self.name = name
    }
}

var ed = Person(name: "Ed")
But what if we didn’t always need the family tree for a particular person? If we add the lazy keyword to the familyTree property, then Swift will only create the FamilyTree struct when it’s first accessed:

lazy var familyTree = FamilyTree()
So, if you want to see the “Creating family tree!” message, you need to access the property at least once:

ed.familyTree

Because the classSize property belongs to the struct itself rather than instances of the struct, we need to read it using Student.classSize:

print(Student.classSize)

The first difference between classes and structs is that classes never come with a memberwise initializer. This means if you have properties in your class, you must always create your own initializer.

For example:

class Dog {
    var name: String
    var breed: String

    init(name: String, breed: String) {
        self.name = name
        self.breed = breed
    }
}

For safety reasons, Swift always makes you call super.init() from child classes – just in case the parent class does some important work when it’s created.

Swift requires us to use override func rather than just func when overriding a method – it stops you from overriding a method by accident, and you’ll get an error if you try to override something that doesn’t exist on the parent class

To make a class final just put the final keyword before it, like this:

final class Dog {
    var name: String
    var breed: String

    init(name: String, breed: String) {
        self.name = name
        self.breed = breed
    }
}

The third difference between classes and structs is how they are copied. When you copy a struct, both the original and the copy are different things – changing one won’t change the other. When you copy a class, both the original and the copy point to the same thing, so changing one does change the other.

And now for the deinitializer. This will be called when the Person instance is being destroyed:

deinit {
    print("\(name) is no more!")
}

The final difference between classes and structs is the way they deal with constants. If you have a constant struct with a variable property, that property can’t be changed because the struct itself is constant.

However, if you have a constant class with a variable property, that property can be changed. Because of this, classes don’t need the mutating keyword with methods that change properties; that’s only needed with structs.

This difference means you can change any variable property on a class even when the class is created as a constant – this is perfectly valid code:

class Singer {
    var name = "Taylor Swift"
}

let taylor = Singer()
taylor.name = "Ed Sheeran"
print(taylor.name)
If you want to stop that from happening you need to make the property constant:

class Singer {
    let name = "Taylor Swift"
}

protocol Identifiable {
    var id: String { get set }
}
We can’t create instances of that protocol - it’s a description of what we want, rather than something we can create and use directly. But we can create a struct that conforms to it:

struct User: Identifiable {
    var id: String
}
Finally, we’ll write a displayID() function that accepts any Identifiable object:

func displayID(thing: Identifiable) {
    print("My ID is \(thing.id)")
}

One protocol can inherit from another in a process known as protocol inheritance. Unlike with classes, you can inherit from multiple protocols at the same time before you add your own customizations on top.

Swift doesn’t let you add stored properties in extensions, so you must use computed properties instead. For example, we could add a new isEven computed property to integers that returns true if it holds an even number:

extension Int {
    var isEven: Bool {
        return self % 2 == 0
    }
}

Protocols let you describe what methods something should have, but don’t provide the code inside. Extensions let you provide the code inside your methods, but only affect one data type – you can’t add the method to lots of types at the same time.

Protocol extensions solve both those problems: they are like regular extensions, except rather than extending a specific type like Int you extend a whole protocol so that all conforming types get your changes.

Protocol extensions can provide default implementations for our own protocol methods. This makes it easy for types to conform to a protocol, and allows a technique called “protocol-oriented programming” – crafting your code around protocols and protocol extensions.

First, here’s a protocol called Identifiable that requires any conforming type to have an id property and an identify() method:

protocol Identifiable {
    var id: String { get set }
    func identify()
}
We could make every conforming type write their own identify() method, but protocol extensions allow us to provide a default:

extension Identifiable {
    func identify() {
        print("My ID is \(id).")
    }
}

if let unwrapped = name {
    print("\(unwrapped.count) letters")
} else {
    print("Missing name.")
}
If name holds a string, it will be put inside unwrapped as a regular String and we can read its count property inside the condition. Alternatively, if name is empty, the else code will be run.

However, the major difference between if let and guard let is that your unwrapped optional remains usable after the guard code.

Let’s try it out with a greet() function. This will accept an optional string as its only parameter and try to unwrap it, but if there’s nothing inside it will print a message and exit. Because optionals unwrapped using guard let stay around after the guard finishes, we can print the unwrapped string at the end of the function:

func greet(_ name: String?) {
    guard let unwrapped = name else {
        print("You didn't provide a name!")
        return
    }

    print("Hello, \(unwrapped)!")
}

Even though Swift isn’t sure the conversion will work, you can see the code is safe so you can force unwrap the result by writing ! after Int(str), like this:

let num = Int(str)!
Swift will immediately unwrap the optional and make num a regular Int rather than an Int?. But if you’re wrong – if str was something that couldn’t be converted to an integer – your code will crash.

If we call that with ID 15 we’ll get back nil because the user isn’t recognized, but with nil coalescing we can provide a default value of “Anonymous” like this:

let user = username(for: 15) ?? "Anonymous"

There are two alternatives to try, both of which will make more sense now that you understand optionals and force unwrapping.

The first is try?, and changes throwing functions into functions that return an optional. If the function throws an error you’ll be sent nil as the result, otherwise you’ll get the return value wrapped as an optional.

Using try? we can run checkPassword() like this:

if let result = try? checkPassword("password") {
    print("Result was \(result)")
} else {
    print("D'oh.")
}

The other alternative is try!, which you can use when you know for sure that the function will not fail. If the function does throw an error, your code will crash.

Using try! we can rewrite the code to this:

try! checkPassword("sekrit")
print("OK!")

This is a failable initializer: an initializer that might work or might not. You can write these in your own structs and classes by using init?() rather than init(), and return nil if something goes wrong. The return value will then be an optional of your type, for you to unwrap however you want.

As an example, we could code a Person struct that must be created using a nine-letter ID string. If anything other than a nine-letter string is used we’ll return nil, otherwise we’ll continue as normal.

Here’s that in Swift:

struct Person {
    var id: String

    init?(id: String) {
        if id.count == 9 {
            self.id = id
        } else {
            return nil
        }
    }
}

If we want to loop over the pets array and ask all the dogs to bark, we need to perform a typecast: Swift will check to see whether each pet is a Dog object, and if it is we can then call makeNoise().

This uses a new keyword called as?, which returns an optional: it will be nil if the typecast failed, or a converted type otherwise.

Here’s how we write the loop in Swift:

for pet in pets {
    if let dog = pet as? Dog {
        dog.makeNoise()
    }
}

Auto Layout: it lets you define rules for how your views should be laid out, and it automatically makes sure those rules are followed.

But – and this is a big but! – it has two rules of its own, both of which must be followed by you:

Your layout rules must be complete. That is, you can't specify only an X position for something, you must also specify a Y position. If it's been a while since you were at school, "X" is position from the left of the screen, and "Y" is position from the top of the screen.
Your layout rules must not conflict. That is, you can't specify that a view must be 10 points away from the left edge, 10 points away from the right edge, and 1000 points wide. An iPhone 5 screen is only 320 points wide, so your layout is mathematically impossible. Auto Layout will try to recover from these problems by breaking rules until it finds a solution, but the end result is never what you want.

You can create Auto Layout rules – known as constraints – entirely inside Interface Builder, and it will warn you if you aren't following the two rules. It will even help you correct any mistakes you make by suggesting fixes.

You already saw that view controllers have an optional storyboard property that either contains the storyboard they were loaded from or nil. Well, they also have an optional navigationController property that contains the navigation controller they are inside if it exists, or nil otherwise.

This is perfect for us, because navigation controllers are responsible for showing screens. Sure, they provide that nice gray bar across the top that you see in lots of apps, but they are also responsible for maintaining a big stack of screens that users navigate through.

Delegation is what's called a programming pattern – a way of writing code – and it's used extensively in iOS. And for good reason: it's easy to understand, easy to use, and extremely flexible.

A delegate is one thing acting in place of another, effectively answering questions and responding to events on its behalf. In our example, we're using WKWebView: Apple's powerful, flexible and efficient web renderer. But as smart as WKWebView is, it doesn't know (or care) how our application wants to behave, because that's our custom code.

The delegation solution is brilliant: we can tell WKWebView that we want to be informed when something interesting happens. In our code, we're setting the web view's navigationDelegate property to self, which means "when any web page navigation happens, please tell me – the current view controller.

As you know, when we say class A: B we’re defining a new class called A that builds on the functionality provided by class B. However, when we say class A: B, C we’re saying it inherits from UIViewController (the first item in the list), and promises it implements the WKNavigationDelegate protocol.

”
